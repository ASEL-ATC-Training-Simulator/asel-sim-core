on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture to build for'
        required: true
        type: string
      os:
        description: 'OS for the GitHub Actions Runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      short-os:
        description: 'Short form for OS'
        required: false
        default: 'linux'
        type: string
      rust-arch:
        description: 'Architecture for Rust'
        required: true
        type: string
      rust-os:
        description: 'Rust OS target'
        required: false
        default: 'unknown-linux-gnu'
        type: string
      rust-target-suffix:
        description: 'Rust target suffix'
        default: ''
        required: false
        type: string
      rust-config:
        description: 'Extra cargo flags'
        default: ''
        required: false
        type: string

jobs:      
  build:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Checkout Sauna Vatsim Private Project
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-vatsim-private'
          token: ${{ secrets.SAUNA_PAT }}
          path: 'sauna-vatsim-private'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x.x
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: '${{ github.workspace }}/out/build'
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }}
      - name: Install Linux Arm64 Tools
        if: ${{ inputs.short-os == 'linux' && inputs.arch == 'arm64' }}
        run: |
          sudo apt-get install gcc-aarch64-linux-gnu -y
      - name: Build
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-api
          dotnet build --verbosity normal -c Release -r ${{ inputs.short-os }}-${{ inputs.arch }} -p:PlatformTarget=${{ inputs.arch }} -o ${{ github.workspace }}/bin --self-contained
      - name: Build Sauna Vatsim Private
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-vatsim-private
          cargo build --verbose --target-dir ${{ github.workspace }}/out/build --target ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }} -r ${{ inputs.rust-config }}
          Copy-Item -Path "${{ github.workspace }}/out/build/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/bin" -Include *.dll,*.so*,*.dylib*
      - name: Tar Output
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/bins'
          cd ${{ github.workspace }}/bin
          tar -cvzf ${{ github.workspace }}/bins/SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz *
      - name: Archive Binaries
        uses: actions/upload-artifact@v4
        with:
          name: SaunaApi-bins-${{ inputs.short-os }}-${{ inputs.arch }}
          path: |
            ${{ github.workspace }}/bins/*